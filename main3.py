# hi, this 3 part!# class Person:#     __slots__ = '_fio', '_old', '_job',##     def __init__(self, fio, old, job):#         self._fio = fio#         self._old = old#         self._job = job## persons = [Person('Суворов', 52, 'полководец'),#            Person('Рахманинов', 50, 'пианист, композитор'),#            Person('Балакирев', 34, 'программист и преподаватель'),#            Person('Пушкин', 32, 'поэт и писатель')]# zadaniye 4.7.6# class Planet:#     def __init__(self, name, diametr, period_solar, period):#         self._name = name#         self._diametr = diametr#         self._period_solar = period_solar#         self._period = period### class SolarSystem:#     __obj = None#     __slots__ = ('_mercury', '_venus', '_earth', '_mars', '_jupiter', '_saturn', '_uranus', '_neptune')##     def __new__(cls, *args, **kwargs):#         if cls.__obj is None:#             cls.__obj = super().__new__(cls)#         return cls.__obj###     def __init__(self):#         self._mercury = Planet('Меркурий', 4878, 87.97, 1407.5)#         self._venus = Planet('Венера', 12104, 224.7, 5832.45)#         self._earth = Planet('Земля', 12756, 365.3, 23.93)#         self._mars = Planet('Марс', 6794, 687, 24.62)#         self._jupiter = Planet('Юпитер', 142800, 4330, 9.9)#         self._saturn = Planet('Сатурн', 120660, 10753, 10.63)#         self._uranus = Planet('Уран', 51118, 30665, 17.2)#         self._neptune = Planet('Нептун', 49528, 60150, 16.1)### s_system = SolarSystem()#zadaniye 4.7.7# class Star:#     __slots__ = '_name', '_massa', '_temp',##     def __init__(self, name, massa, temp):#         self._name = name#         self._massa = massa#         self._temp = temp### class WhiteDwarf(Star):#     __slots__ = '_type_star', '_radius',##     def __init__(self, name, massa, temp, type_star, radius):#         super().__init__(name, massa, temp)#         self._type_star = type_star#         self._radius = radius### class YellowDwarf(Star):#     __slots__ = '_type_star', '_radius',##     def __init__(self, name, massa, temp, type_star, radius):#         super().__init__(name, massa, temp)#         self._type_star = type_star#         self._radius = radius### class RedGiant(Star):#     __slots__ = '_type_star', '_radius',##     def __init__(self, name, massa, temp, type_star, radius):#         super().__init__(name, massa, temp)#         self._type_star = type_star#         self._radius = radius### class Pulsar(Star):#     __slots__ = '_type_star', '_radius',##     def __init__(self, name, massa, temp, type_star, radius):#         super().__init__(name, massa, temp)#         self._type_star = type_star#         self._radius = radius### stars = [RedGiant('Альдебаран', 5, 3600, 'красный гигант', 45),#          WhiteDwarf('Сириус А', 2.1, 9250, 'белый карлик', 2),#          WhiteDwarf('Сириус B', 1, 8200, 'белый карлик', 0.01),#          YellowDwarf('Солнце', 1, 6000, 'желтый карлик', 1)]### white_dwarfs = list(filter(lambda x: isinstance(x, WhiteDwarf), stars))# print(white_dwarfs)class Note:    _cyrillic_notes = ('до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си')    def __init__(self, name, ton):        self._name = name        self._ton = ton    def __setattr__(self, key, value):        if key == '_name' and value not in self._cyrillic_notes:            raise ValueError('недопустимое значение аргумента')        if key == '_ton' and value not in (-1, 0, 1):            raise ValueError('недопустимое значение аргумента')        object.__setattr__(self, key, value)class Notes:    __slots__ = '_do', '_re', '_mi', '_fa', '_solt', '_la', '_si'    _cyrillic_notes = ('до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си')    _obj = None    def __new__(cls, *args, **kwargs):        if cls._obj is None:            cls._obj = super().__new__(cls)        return cls._obj    def __del__(self):        Notes._obj = None    def __init__(self):        self._do = Note('до', 0)        self._re = Note("ре", 0)        self._mi = Note("ми", 0)        self._fa = Note("фа", 0)        self._solt = Note("соль", 0)        self._la = Note("ля", 0)        self._si = Note("си", 0)    def __getitem__(self, item):        if not (0 <= item < 7):            raise IndexError('недопустимый индекс')        return getattr(self, self.__slots__[item])n = Notes()# nota = n[3]# print(nota)print(n)